package mitchell.client;
import mitchell.model.Vehicle;

import java.util.*;

import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.RestTemplate;

/**
 * Seth Kim
 * 2/14/2020
 *
 * note: this Client class is useful if someone (Mr L) just wants to call and perform the CRUD operations
 * without having to write the RestTemplate stuff. So when Mr L wants to get a list of all vehicles, he can
 * just call VehicleClient.getAllVehicles() and that will give him the list of all vehicles and he's done,
 * rather than having to write any of the RestTemplate or response entity code to actually get all the vehicles
 * from the database. It makes it easy for Mr. L
 *
 */
public class VehicleClient
{
    //private instance variables
    private static RestTemplate restTemplate = new RestTemplate();
    private int port = 8080;
    private static final String url = "/vehicles/";
    private String getUrl()
    {
        return "http://localhost:" + port + url;
    }

    //helper method for cleanDataBase. deletes a vehicle with ID id
    private void delete(int id)
    {
        restTemplate.delete(getUrl()+id);
    }

    /**
     * Get all vehicles from the database. Then using each vehicle's id, delete each vehicle
     * This will remove all vehicles from the database
     */
    public void cleanDataBase()
    {
        ResponseEntity<Vehicle[]> boop = restTemplate.getForEntity(getUrl(), Vehicle[].class);
        for (Vehicle v: boop.getBody())
        {
            delete(v.getId());
        }
    }

    /**
     *
     * @param vehicle - the vehicle to be posted into the database
     * @return that vehicle with it's ID generated by database
     */
    public Vehicle createVehicle(Vehicle vehicle)
    {
        //Flow: restTemplate's postForEntity (think of like PostMan), will call my endpoint specified by getUrl(),
        //That url: http://localhost:8080/vehicles/ will trigger the @PostMapping from my VehicleController class
        //which is linked to the createVehicle method which saves vehicle to database
        ResponseEntity<Vehicle> responseEntity = restTemplate.postForEntity(getUrl(), vehicle, Vehicle.class);
        return responseEntity.getBody();
    }

    /**
     * Update a vehicle
     * @param vehicleUpdated- the updated vehicle to replace the old vehicle with ID: id
     * @return
     */
    public Vehicle updateVehicleById(int id, Vehicle vehicleUpdated)
    {
        //update vehicle with ID id in the database to contain the contents of vehicleUpdated
        restTemplate.put(getUrl()+id, vehicleUpdated, Vehicle.class);
        //get that updated Vehicle from database and return it
        ResponseEntity<Vehicle> responseEntity =
                restTemplate.getForEntity(getUrl()+id, Vehicle.class);
        return responseEntity.getBody();
    }

    /**
     * return the updated list of vehicles so caller can check that they were indeed updated
     * @param list- the list of updated vehicles to replace
     * @return
     */
    public List<Vehicle> updateVehicles(List<Vehicle> list)
    {
        restTemplate.put(getUrl(), list, ResponseEntity.class); //update all vehicles in the database

        //get the array of updated vehicles from database
        ResponseEntity<Vehicle[]> responseEntity =
                restTemplate.getForEntity(getUrl(), Vehicle[].class);
        Vehicle[] array = responseEntity.getBody();

        List<Vehicle> updatedList = new ArrayList<>();
        //convert array to list and return the list of updated vehicles
        for (Vehicle v: array)
        {
            updatedList.add(v);
        }
        return updatedList;
    }

    /**
     * simply delete vehicle in the database with ID id
     * @param id
     */
    public void deleteVehicleById(int id)
    {
        restTemplate.delete(getUrl() + id);
    }

    /**
     *
     * @param id the id to search for in the database to locate the vehicle with that id
     * @return the vehicle with ID: id
     */
    public Vehicle getVehicleByID(int id)
    {
        ResponseEntity<Vehicle> responseEntity = restTemplate.getForEntity(getUrl() + id, Vehicle.class);
        return responseEntity.getBody();
    }

    /**
     *
     * @return a list of ALL vehicles in the database
     */
    public List<Vehicle> getAllVehicles()
    {
        List<Vehicle> list = new ArrayList<>();
        //remember it filters based on the URL
        //the url would look like http://localhost:8080/vehicles/?year=1999&make=toyota&model=prius
        ResponseEntity<Vehicle[]> responseEntity =
                restTemplate.getForEntity(getUrl(), Vehicle[].class);
        Vehicle[] array = responseEntity.getBody();
        for (Vehicle v: array)
        {
            list.add(v);
        }
        return list;
    }

    /**
     * Helper method called by all of the getFilterVehicles methods
     * Responsible for returning the list of filtered vehicles from the database
     *         String s = "/vehicles/?&year=2000&make=toyota&model=p";
     *         String URL = s.replaceFirst("&", "");
     *
     *         System.out.println(URL); //prints /vehicles/?year=2000&make=toyota&model=p
     */
    private List<Vehicle> helpFilter(Boolean year, Boolean make, Boolean model,
                                     String yearParam, String makeParam, String modelParam)
    {
        List<Vehicle> list = new ArrayList<>();
        String yearURL = year ? "&year="+yearParam: "";
        String makeURL = make ? "&make="+makeParam: "";
        String modelURL = model ? "&model="+modelParam: "";
        //concatenate. Foe example,  http://localhost:8080/vehicles/?&year=1999&make=toyota&model=prius
        String s = getUrl()+"?"+yearURL+makeURL+modelURL;
        String URL = s.replaceFirst("&", ""); //eliminate first '&'
        //since the url should look like   http://localhost:8080/vehicles/?year=1999&make=toyota&model=prius
        ResponseEntity<Vehicle[]> responseEntity =
                restTemplate.getForEntity(URL, Vehicle[].class);
        Vehicle[] array = responseEntity.getBody();
        for (Vehicle v: array)
        {
            list.add(v);
        }
        return list;
    }

    /**
     * @return list of vehicles with yearParam from database
     */
    public List<Vehicle> getVehiclesByYear(String yearParam)
    {
        return helpFilter(true, false, false, yearParam, "", "");
    }

    /**
     * @return list of vehicles with yearParam and makeParam from database
     */
    public List<Vehicle> getVehiclesByYearAndMake(String yearParam, String makeParam)
    {
        return helpFilter(true, true, false, yearParam, makeParam, "");
    }

    /**
     * @return list of vehicles with yearParam and modelParam from database
     */
    public List<Vehicle> getVehiclesByYearAndModel(String yearParam, String modelParam)
    {
        return helpFilter(true, false, true, yearParam, "", modelParam);
    }

    /**
     * @return list of vehicles with yearParam, makeParam, and modelParam from database
     */
    public List<Vehicle> getVehiclesByYearAndMakeAndModel(String yearParam, String makeParam, String modelParam)
    {
        return helpFilter(true, true, true, yearParam, makeParam, modelParam);
    }

    /**
     * @return list of vehicles with makeParam from database
     */
    public List<Vehicle> getVehiclesByMake(String makeParam)
    {
        return helpFilter(false, true, false, "", makeParam, "");
    }
    /**
     * @return list of vehicles with makeParam and modelParam from database
     */
    public List<Vehicle> getVehiclesByMakeAndModel(String makeParam, String modelParam)
    {
        return helpFilter(false, true, true, "", makeParam, modelParam);
    }
    /**
     * @return list of vehicles with modelParam from database
     */
    public List<Vehicle> getVehiclesByModel(String modelParam)
    {
        return helpFilter(false, false, true, "", "", modelParam);
    }

}
